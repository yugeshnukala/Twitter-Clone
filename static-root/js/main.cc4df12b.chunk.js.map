{"version":3,"sources":["logo.svg","lookup/components.js","tweets/buttons.js","tweets/lookup.js","tweets/create.js","tweets/detail.js","tweets/list.js","tweets/components.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","backendLookup","method","endpoint","callback","data","jsonData","JSON","stringify","xhr","XMLHttpRequest","url","responseType","open","setRequestHeader","onload","response","status","onerror","e","console","log","send","ActionBtn","props","tweet","action","didPerformAction","likes","className","actionDisplay","display","handleActionBackendEvent","type","onClick","event","preventDefault","tweetId","id","apiTweetAction","TweetCreate","textAreaRef","React","createRef","didTweet","handleBackendUpdate","alert","onSubmit","newVal","current","value","content","ref","required","name","ParentTweet","parent","Tweet","hideActions","didRetweet","useState","actionTweet","setActionTweet","match","window","location","pathname","urlTweetId","groups","tweetid","isDetail","handlePerformAction","newActionTweet","Fragment","href","TweetsList","tweetsInit","setTweetsInit","tweets","setTweets","tweetsDidSet","setTweetsDidSet","useEffect","final","newTweets","concat","length","username","apiTweetList","handleDidRetweet","newTweet","updateTweetsInit","unshift","updateFinalTweets","map","item","index","key","TweetsComponent","setNewTweets","canTweet","tempNewTweets","TweetDetailComponent","didLookup","setDidLookup","setTweet","handleBackendLookup","apiTweetDetail","App","src","logo","alt","target","rel","Boolean","hostname","appEl","document","getElementById","ReactDOM","render","createElement","tweetsEl","dataset","querySelectorAll","forEach","container","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.cc4df12b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// function getCookie(name) {\r\n//   var cookieValue = null;\r\n//   if (document.cookie && document.cookie !== '') {\r\n//       var cookies = document.cookie.split(';');\r\n//       for (var i = 0; i < cookies.length; i++) {\r\n//           var cookie = cookies[i].trim();\r\n//           // Does this cookie string begin with the name we want?\r\n//           if (cookie.substring(0, name.length + 1) === (name + '=')) {\r\n//               cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\r\n//               break;\r\n//           }\r\n//       }\r\n//   }\r\n//   return cookieValue;\r\n// }\r\n\r\nexport function backendLookup(method, endpoint, callback, data) {\r\n  let jsonData;\r\n  if (data){\r\n    jsonData = JSON.stringify(data)\r\n  }\r\n  const xhr = new XMLHttpRequest()\r\n  const url = `http://localhost:8000/api${endpoint}`\r\n  xhr.responseType = \"json\"\r\n  // const csrftoken = getCookie('csrftoken');\r\n  xhr.open(method, url)\r\n  xhr.setRequestHeader(\"Content-Type\", \"application/json\")\r\n\r\n  // if (csrftoken){\r\n  //   xhr.setRequestHeader(\"HTTP_X_REQUESTED_WITH\", \"XMLHttpRequest\")\r\n  //   xhr.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\")\r\n  //   xhr.setRequestHeader(\"X-CSRFToken\", csrftoken)\r\n  // }\r\n  \r\n  xhr.onload = function() {\r\n    callback(xhr.response, xhr.status)\r\n  }\r\n  xhr.onerror = function (e) {\r\n    console.log(e)\r\n    callback({\"message\": \"The request was an error\"}, 400)\r\n  }\r\n  xhr.send(jsonData)\r\n}\r\n\r\n","import React from 'react'\r\n\r\nimport {apiTweetAction} from './lookup'\r\n\r\nexport function ActionBtn(props) {\r\n    const {tweet, action, didPerformAction} = props\r\n    const likes = tweet.likes ? tweet.likes : 0\r\n    const className = props.className ? props.className : 'btn btn-primary btn-sm'\r\n    const actionDisplay = action.display ? action.display : 'Action'\r\n    \r\n    const handleActionBackendEvent = (response, status) =>{\r\n      console.log(response, status)\r\n      if ((status === 200 || status === 201) && didPerformAction){\r\n        didPerformAction(response, status)\r\n      }\r\n    }\r\n    const handleClick = (event) => {\r\n      event.preventDefault()\r\n      apiTweetAction(tweet.id, action.type, handleActionBackendEvent)\r\n        \r\n    }\r\n    const display = action.type === 'like' ? `${likes} ${actionDisplay}` : actionDisplay\r\n    return <button className={className} onClick={handleClick}>{display}</button>\r\n  }","import {backendLookup} from '../lookup'\r\n\r\nexport function apiTweetCreate(newTweet, callback){\r\n    backendLookup(\"POST\", \"/tweets/create/\", callback, {content: newTweet})\r\n  }\r\n\r\nexport function apiTweetAction(tweetId, action, callback){\r\n    const data = {id: tweetId, action: action}\r\n    backendLookup(\"POST\", \"/tweets/action/\", callback, data)\r\n}\r\n\r\nexport function apiTweetDetail(tweetId, callback) {\r\n    backendLookup(\"GET\", `/tweets/${tweetId}/`, callback)\r\n}\r\n\r\n\r\nexport function apiTweetList(username, callback) {\r\n    let endpoint =  \"/tweets/\"\r\n    if (username){\r\n        endpoint =  `/tweets/?username=${username}`\r\n    }\r\n    backendLookup(\"GET\", endpoint, callback)\r\n}","import React from 'react'\r\nimport {apiTweetCreate} from './lookup'\r\n\r\n\r\nexport function TweetCreate(props){\r\n  const textAreaRef = React.createRef()\r\n  const {didTweet} = props\r\n    const handleBackendUpdate = (response, status) =>{\r\n      if (status === 201){\r\n        didTweet(response)\r\n      } else {\r\n        console.log(response)\r\n        alert(\"An error occured please try again\")\r\n      }\r\n    }\r\n\r\n    const handleSubmit = (event) => {\r\n      event.preventDefault()\r\n      const newVal = textAreaRef.current.value\r\n      // backend api request\r\n      apiTweetCreate(newVal, handleBackendUpdate)\r\n      textAreaRef.current.value = ''\r\n    }\r\n    return <div className={props.className}>\r\n          <form onSubmit={handleSubmit}>\r\n            <textarea ref={textAreaRef} required={true} className='form-control' name='tweet'>\r\n\r\n            </textarea>\r\n            <button type='submit' className='btn btn-primary my-3'>Tweet</button>\r\n        </form>\r\n  </div>\r\n}","import React, {useState}  from 'react'\r\n\r\nimport {ActionBtn} from './buttons'\r\n\r\nexport function ParentTweet(props){\r\n    const {tweet} = props\r\n    return tweet.parent ? <div className='row'>\r\n    <div className='col-11 mx-auto p-3 border rounded'>\r\n      <p className='mb-0 text-muted small'>Retweet</p>\r\n      <Tweet hideActions className={' '} tweet={tweet.parent} />\r\n    </div>\r\n    </div> : null\r\n  }\r\n  export function Tweet(props) {\r\n      const {tweet, didRetweet, hideActions} = props\r\n      const [actionTweet, setActionTweet] = useState(props.tweet ? props.tweet : null)\r\n      const className = props.className ? props.className : 'col-10 mx-auto col-md-6'\r\n      const path = window.location.pathname\r\n      const match = path.match(/(?<tweetid>\\d+)/)\r\n      const urlTweetId = match ? match.groups.tweetid : -1\r\n      const isDetail = `${tweet.id}` === `${urlTweetId}`\r\n      \r\n      const handleLink = (event) => {\r\n        event.preventDefault()\r\n        window.location.href = `/${tweet.id}`\r\n      }\r\n      const handlePerformAction = (newActionTweet, status) => {\r\n        if (status === 200){\r\n          setActionTweet(newActionTweet)\r\n        } else if (status === 201) {\r\n          if (didRetweet){\r\n            didRetweet(newActionTweet)\r\n          }\r\n        }\r\n        \r\n      }\r\n      \r\n      return <div className={className}>\r\n              <div>\r\n                <p>{tweet.id} - {tweet.content}</p>\r\n                <ParentTweet tweet={tweet} />\r\n              </div>\r\n          <div className='btn btn-group'>\r\n          {(actionTweet && hideActions !== true) && <React.Fragment>\r\n                  <ActionBtn tweet={actionTweet} didPerformAction={handlePerformAction} action={{type: \"like\", display:\"Likes\"}}/>\r\n                  <ActionBtn tweet={actionTweet} didPerformAction={handlePerformAction} action={{type: \"unlike\", display:\"Unlike\"}}/>\r\n                  <ActionBtn tweet={actionTweet} didPerformAction={handlePerformAction} action={{type: \"retweet\", display:\"Retweet\"}}/>\r\n                </React.Fragment>\r\n          }\r\n                  {isDetail === true ? null : <button className='btn btn-outline-primary btn-sm' onClick={handleLink}>View</button>}\r\n                </div>\r\n       \r\n      </div>\r\n    }","import React, {useEffect, useState}  from 'react'\r\n\r\nimport {apiTweetList} from './lookup'\r\n\r\nimport {Tweet} from './detail'\r\n\r\nexport function TweetsList(props) {\r\n    const [tweetsInit, setTweetsInit] = useState([])\r\n    const [tweets, setTweets] = useState([])\r\n    const [tweetsDidSet, setTweetsDidSet] = useState(false)\r\n    useEffect(()=>{\r\n      const final = [...props.newTweets].concat(tweetsInit)\r\n      if (final.length !== tweets.length) {\r\n        setTweets(final)\r\n      }\r\n    }, [props.newTweets, tweets, tweetsInit])\r\n\r\n    useEffect(() => {\r\n      if (tweetsDidSet === false){\r\n        const handleTweetListLookup = (response, status) => {\r\n          if (status === 200){\r\n            setTweetsInit(response)\r\n            setTweetsDidSet(true)\r\n          } else {\r\n            alert(\"There was an error\")\r\n          }\r\n        }\r\n        apiTweetList(props.username, handleTweetListLookup)\r\n      }\r\n    }, [tweetsInit, tweetsDidSet, setTweetsDidSet, props.username])\r\n\r\n\r\n    const handleDidRetweet = (newTweet) => {\r\n      const updateTweetsInit = [...tweetsInit]\r\n      updateTweetsInit.unshift(newTweet)\r\n      setTweetsInit(updateTweetsInit)\r\n      const updateFinalTweets = [...tweets]\r\n      updateFinalTweets.unshift(tweets)\r\n      setTweets(updateFinalTweets)\r\n    }\r\n    return tweets.map((item, index)=>{\r\n      return <Tweet  \r\n        tweet={item} \r\n        didRetweet={handleDidRetweet}\r\n        className='my-5 py-5 border bg-white text-dark' \r\n        key={`${index}-{item.id}`} />\r\n    })\r\n  }","import React, {useEffect, useState}  from 'react'\r\n\r\nimport {TweetCreate} from './create'\r\nimport {Tweet} from './detail'\r\nimport {apiTweetDetail} from './lookup'\r\nimport {TweetsList} from './list'\r\n\r\n\r\nexport function TweetsComponent(props) {\r\n    const [newTweets, setNewTweets] = useState([])\r\n    const canTweet = props.canTweet === \"false\" ? false : true\r\n    const handleNewTweet = (newTweet) =>{\r\n      let tempNewTweets = [...newTweets]\r\n      tempNewTweets.unshift(newTweet)\r\n      setNewTweets(tempNewTweets)\r\n    }\r\n    return <div className={props.className}>\r\n            {canTweet === true && <TweetCreate didTweet={handleNewTweet} className='col-12 mb-3' />}\r\n          <TweetsList newTweets={newTweets} {...props} />\r\n    </div>\r\n}\r\n\r\n\r\nexport function TweetDetailComponent(props){\r\n  const {tweetId} = props\r\n  const [didLookup, setDidLookup] = useState(false)\r\n  const [tweet, setTweet] = useState(null)\r\n\r\n  const handleBackendLookup = (response, status) => {\r\n    if (status === 200) {\r\n      setTweet(response)\r\n    } else {\r\n      alert(\"There was an error finding your tweet.\")\r\n    }\r\n  }\r\n  useEffect(()=>{\r\n    if (didLookup === false){\r\n\r\n      apiTweetDetail(tweetId, handleBackendLookup)\r\n      setDidLookup(true)\r\n    }\r\n  }, [tweetId, didLookup, setDidLookup])\r\n\r\n  return tweet === null ? null : <Tweet tweet={tweet} className={props.className} />\r\n }","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport {TweetsComponent} from './tweets'\n\n\nfunction App() {\n  \n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <div>\n          <TweetsComponent />\n        </div>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {TweetsComponent, TweetDetailComponent} from './tweets'\n\nconst appEl = document.getElementById('root')\n\nif(appEl){\n\tReactDOM.render(<App />,appEl);\n}\n\nconst e = React.createElement\nconst tweetsEl = document.getElementById('tweetme')\n\nif(tweetsEl) {\n\tReactDOM.render(\n\t\te(TweetsComponent ,tweetsEl.dataset)\n\t\t,tweetsEl\n\t\t);\n}\n\nconst tweetDetailElements = document.querySelectorAll(\".tweetme-detail\")\n\ntweetDetailElements.forEach(container => {\n\tReactDOM.render(\n\t\te(TweetDetailComponent ,container.dataset)\n\t\t,container\n\t\t);\n})\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}